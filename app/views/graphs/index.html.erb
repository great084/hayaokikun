<h1>Graphs#index</h1>
<p>Find me in app/views/graphs/index.html.erb</p>


<p class="mt-4">ボタンを押したときにモーダルが表示されれば，「Bootstrap」の導入はOKです</p>
<button type="button" class="btn btn-primary btn-block" 
    data-toggle="modal" data-target="#test-modal">ボタン</button>
<!-- ボタンを押したとき，以下のモーダルが出現 -->
<div class="modal fade" id="test-modal" data-backdrop="static" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">タイトル</h5>
                <button type="button" class="close" data-dismiss="modal" arial-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>本文はここに書きます</p>
            </div>
            <div class="modal-fotter">
                <p>フッターはここに書きます</p>
            </div>
        </div>
    </div>
</div>

<p class="my-4">フォームをクリックしたときに，青色の帯のカレンダーが出れば「flatpickr」の導入はOKです</p>
<input class="form-control bg-white" type="text" id="date-form" placeholder="日付を設定" readonly>

<!-- Script -->
<script>

    const TODAY = new Date(new Date().setHours(0, 0, 0, 0))
    const A_MONTH_AGO = new Date(TODAY.getFullYear(), TODAY.getMonth() -1, TODAY.getDate())

    // 選択できない日付データ
    const DISABLE_DATES = ['2019-12-10', '2020-04-05']

    // カレンダーの日本語化
    flatpickr.localize(flatpickr.l10ns.ja)

    // カレンダーの表示
    flatpickr('#date-form', {
        // スマホでもfaltpickarを使用
        disableMobile: true,
        // 1ヶ月前から本日まで選択可能
        minDate: A_MONTH_AGO,
        maxDate: TODAY,
        // 選択できない日付
        disable: DISABLE_DATES
    })
</script>

<p class="mt-4">棒グラフが表示されていれば，「Chart.js」の導入はOKです</p>
<canvas id="bar-chart"></canvas>

<script>
    // 棒グラフのデータ
    let barLabel = ['1月','2月','3月','4月','5月']
    let barData = [5, 4, 2, 6, 5]

    // 棒グラフのオプション
    const barChartData = {
        labels: barLabel,
        datasets: [{
            label: '点数',
            data:   barData,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
        }]
    } 

    const barChartOption = {
        title: {
            display: true,
            text: '棒グラフ'
        },
        scales: {
            yAxes: [{
                ticks: {
                    // yAxesのメモリを0からスタートに強制
                    beginAtZero: true
                }
            }]
        }
    }

    // 棒グラフを表示
    const barChartContext = document.getElementById("bar-chart").getContext('2d')
    new Chart(barChartContext, {
        type: 'bar',
        data: barChartData,
        options: barChartOption
    })
</script>


<p class="mt-4">折れ線グラフが表示されていれば，「Chart.js」の導入はOKです</p>
<canvas id="line-chart"></canvas>

<script>
    let lineLabel = ['1/1', '1/2', '1/3', '1/4', '1/6']
    let lineData = [60.3, 59.5, 48.7, 55.5, 62.9]

    const lineChartData = {
        labels: lineLabel,
        datasets: [{
            label: '体重(kg)',
            data:   lineData,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            spanGaps: true
        }]
 
    }
    const lineChartOption = {
        title: {
            display: true,
            text: '折れ線グラフ'
        },
        tooltips: {
            callbacks: {
                // ホバー時のラベル表示を変更
                title: function (tooltipItems){
                    return tooltipItems[0].xLabel.replace(/^(\d+).(\d+)$/, ' $1 月 $2 日')
                },
                label: function (tooltipItem) {
                    return '体重：' + tooltipItem.yLabel + 'kg'
                }
            }
        }
    }

    // 折れ線グラフを表示
    const lineChartContext = document.getElementById("line-chart").getContext('2d')
    new Chart(lineChartContext, {
        type: 'line',
        data: lineChartData,
        options: lineChartOption
    })


</script>